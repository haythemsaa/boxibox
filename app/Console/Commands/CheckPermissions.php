<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;

class CheckPermissions extends Command
{
    protected $signature = 'boxibox:check-permissions';
    protected $description = 'V√©rifie les permissions et la configuration du syst√®me';

    public function handle()
    {
        $this->info('üîç V√©rification de la configuration Boxibox...');
        $this->newLine();

        $allChecks = true;

        // V√©rifier les permissions des dossiers
        $allChecks &= $this->checkDirectoryPermissions();

        // V√©rifier la configuration de base de donn√©es
        $allChecks &= $this->checkDatabase();

        // V√©rifier la configuration SEPA
        $allChecks &= $this->checkSepaConfiguration();

        // V√©rifier les migrations
        $allChecks &= $this->checkMigrations();

        // V√©rifier les seeders
        $allChecks &= $this->checkSeeders();

        $this->newLine();

        if ($allChecks) {
            $this->info('‚úÖ Toutes les v√©rifications sont pass√©es avec succ√®s !');
            return 0;
        } else {
            $this->error('‚ùå Certaines v√©rifications ont √©chou√©. Consultez les d√©tails ci-dessus.');
            return 1;
        }
    }

    private function checkDirectoryPermissions()
    {
        $this->line('üìÅ V√©rification des permissions de dossiers...');

        $directories = [
            'storage/app' => 'Documents et fichiers',
            'storage/logs' => 'Logs de l\'application',
            'storage/framework/cache' => 'Cache du framework',
            'storage/framework/sessions' => 'Sessions',
            'storage/framework/views' => 'Vues compil√©es',
            'bootstrap/cache' => 'Cache de bootstrap',
        ];

        $allOk = true;

        foreach ($directories as $dir => $description) {
            $path = base_path($dir);

            if (!file_exists($path)) {
                $this->warn("   ‚ö†Ô∏è  Dossier manquant : {$dir} ({$description})");
                mkdir($path, 0775, true);
                $this->line("   ‚úÖ Dossier cr√©√© : {$dir}");
            }

            if (is_writable($path)) {
                $this->line("   ‚úÖ {$dir} - Accessible en √©criture");
            } else {
                $this->error("   ‚ùå {$dir} - Non accessible en √©criture");
                $allOk = false;
            }
        }

        return $allOk;
    }

    private function checkDatabase()
    {
        $this->line('üóÑÔ∏è V√©rification de la base de donn√©es...');

        try {
            \DB::connection()->getPdo();
            $this->line('   ‚úÖ Connexion √† la base de donn√©es r√©ussie');

            $tables = \DB::select('SHOW TABLES');
            $this->line('   ‚úÖ ' . count($tables) . ' tables trouv√©es');

            return true;

        } catch (\Exception $e) {
            $this->error('   ‚ùå Erreur de connexion : ' . $e->getMessage());
            return false;
        }
    }

    private function checkSepaConfiguration()
    {
        $this->line('üí≥ V√©rification de la configuration SEPA...');

        $config = [
            'SEPA_CREDITOR_ID' => env('SEPA_CREDITOR_ID'),
            'SEPA_CREDITOR_NAME' => env('SEPA_CREDITOR_NAME'),
            'SEPA_CREDITOR_IBAN' => env('SEPA_CREDITOR_IBAN'),
            'SEPA_CREDITOR_BIC' => env('SEPA_CREDITOR_BIC'),
        ];

        $allOk = true;

        foreach ($config as $key => $value) {
            if (empty($value)) {
                $this->warn("   ‚ö†Ô∏è  Configuration manquante : {$key}");
                $allOk = false;
            } else {
                $this->line("   ‚úÖ {$key} configur√©");
            }
        }

        // V√©rifier le dossier SEPA
        $sepaDir = storage_path('app/sepa');
        if (!file_exists($sepaDir)) {
            mkdir($sepaDir, 0775, true);
            $this->line('   ‚úÖ Dossier SEPA cr√©√©');
        }

        if (is_writable($sepaDir)) {
            $this->line('   ‚úÖ Dossier SEPA accessible en √©criture');
        } else {
            $this->error('   ‚ùå Dossier SEPA non accessible en √©criture');
            $allOk = false;
        }

        return $allOk;
    }

    private function checkMigrations()
    {
        $this->line('üîÑ V√©rification des migrations...');

        try {
            $pending = \Artisan::call('migrate:status');
            $output = \Artisan::output();

            if (strpos($output, 'Pending') !== false) {
                $this->warn('   ‚ö†Ô∏è  Des migrations sont en attente');
                return false;
            } else {
                $this->line('   ‚úÖ Toutes les migrations sont appliqu√©es');
                return true;
            }

        } catch (\Exception $e) {
            $this->error('   ‚ùå Erreur lors de la v√©rification des migrations : ' . $e->getMessage());
            return false;
        }
    }

    private function checkSeeders()
    {
        $this->line('üå± V√©rification des donn√©es initiales...');

        $checks = [
            'R√¥les' => \App\Models\Role::count(),
            'Permissions' => \App\Models\Permission::count(),
            'Utilisateurs' => \App\Models\User::count(),
            'Box Familles' => \App\Models\BoxFamille::count(),
            'Emplacements' => \App\Models\Emplacement::count(),
            'Services' => \App\Models\Service::count(),
            'Boxes' => \App\Models\Box::count(),
        ];

        $allOk = true;

        foreach ($checks as $item => $count) {
            if ($count > 0) {
                $this->line("   ‚úÖ {$item} : {$count} √©l√©ments");
            } else {
                $this->warn("   ‚ö†Ô∏è  {$item} : Aucun √©l√©ment trouv√©");
                $allOk = false;
            }
        }

        return $allOk;
    }
}